/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.jakubjagla.Simulation;

import com.jakubjagla.ObjectInfoRenderers.ObjectInfoRendererFactory;
import com.jakubjagla.ObjectInfoRenderers.ObjectInfoRenderer;
import java.awt.FontMetrics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Objects;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.text.BadLocationException;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;

/**
 *
 * @author Jake
 */
public class infoPanel extends javax.swing.JPanel {

    private Object infoObject = null;
    private ObjectInfoRenderer renderer = new ObjectInfoRenderer(null);
    private static BufferedImage imageCache;
    private static String uriCache;
    
    public infoPanel() {
        initComponents(); 
    }
    
    /**
     * Refreshes the infoPanel's elements.
     */
    public void refresh(){
        this.descriptionText.setText(this.renderer.renderObject(this.getWidth()));
            
        StyledDocument doc = this.descriptionText.getStyledDocument();
        SimpleAttributeSet center = new SimpleAttributeSet();
        StyleConstants.setAlignment(center, StyleConstants.ALIGN_CENTER);
        doc.setParagraphAttributes(0, doc.getLength(), center, false);
    }

    private void refreshImage() {
        String uri = null;
        if (this.infoObject instanceof User) {
            uri = ((User) this.infoObject).getProfilePictureUri();
        }
        if (this.infoObject instanceof Watchable) {
            uri = ((Watchable) this.infoObject).getThumbnailUri();
        }
        
        if (uri == null){return;}
        try {
            this.setScaledImageIcon(uri);
        } catch (IOException ex) {
            Logger.getLogger(infoPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void setScaledImageIcon(String imageURI) throws IOException {

        BufferedImage img = imageCache;
        if (imageURI != uriCache) {
            try {
                img = ImageIO.read(new File(imageURI));
                if (img == null){
                    throw new IOException(); //file not present
                }
                imageCache = img;
                uriCache = imageURI;
            } catch (IOException ex) {
                img = ImageIO.read(Objects.requireNonNull(getClass().getResource("/other/404.png")));
                imageCache = img;
                uriCache = imageURI;
            }
        }
        int h = img.getHeight();
        int w = img.getWidth();

        double heightRatio = (double) jPanel1.getSize().height / (double) h;
        double widthRatio = (double) jPanel1.getSize().width / (double) w;
        double ratio = Math.min(heightRatio, widthRatio);
        
        h = (int) (h * ratio);
        w = (int) (w * ratio);
        
        BufferedImage resized = new BufferedImage(w, h, BufferedImage.TYPE_INT_RGB);
        Graphics2D g2 = resized.createGraphics();
        
        g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
        g2.drawImage(img, 0, 0, w, h, null);
        
        g2.dispose();
        
        imageLabel.setText("");
        imageLabel.setIcon(new ImageIcon(resized));
    }
    
    /**
     * Sets the object to be rendered by the infoPanel.
     * @param io Object to be set.
     * @throws Exception When the object class is not supported.
     */
    public void setInfoObject(Object io) throws Exception {
        if (!(io instanceof User || io instanceof Channel || io instanceof Video || io instanceof Stream)) {
            throw new Exception(String.format("Cannot display info about objects of class <%s>. \nOnly User, Channel, Video and Stream classes are supported.", infoObject.getClass()));
        }
        this.infoObject = io;
        this.renderer = ObjectInfoRendererFactory.getRenderer(io);
        
        FontMetrics metrics = this.getFontMetrics(this.descriptionText.getFont());
        this.renderer.setDividerString("═",metrics.stringWidth("═"));
        
        this.refreshImage();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        imageLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        descriptionText = new javax.swing.JTextPane();

        setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.PAGE_AXIS));

        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jPanel1.setMinimumSize(new java.awt.Dimension(447, 200));
        jPanel1.setPreferredSize(new java.awt.Dimension(500, 300));
        jPanel1.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                jPanel1ComponentResized(evt);
            }
        });

        imageLabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        imageLabel.setText("Click on a user or a piece of content to display additional info...");
        imageLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.add(imageLabel);

        jSplitPane1.setTopComponent(jPanel1);

        jScrollPane2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 255, 255), 2));
        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setViewportView(null);

        descriptionText.setEditable(false);
        descriptionText.setBorder(null);
        descriptionText.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        descriptionText.setToolTipText("");
        descriptionText.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        descriptionText.setFocusable(false);
        descriptionText.setMaximumSize(new java.awt.Dimension(3, 24));
        descriptionText.setName(""); // NOI18N
        jScrollPane2.setViewportView(descriptionText);

        jSplitPane1.setRightComponent(jScrollPane2);

        add(jSplitPane1);
    }// </editor-fold>//GEN-END:initComponents

    private void jPanel1ComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPanel1ComponentResized
        refreshImage();
    }//GEN-LAST:event_jPanel1ComponentResized


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextPane descriptionText;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    // End of variables declaration//GEN-END:variables
}
